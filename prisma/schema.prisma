// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

/*datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}*/

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  password       String
  image          String?
  createdAt      DateTime  @default(now())
  role           UserRole
  shop           Shop?     @relation("UserShop")
  orders         Order[]   @relation("UserOrders")
  carts          Cart[]   // Reverse relation field to Cart
  updatedAt      DateTime  @updatedAt
}

enum UserRole {
  NORMAL_USER
  SELLER
  ADMIN
  SUB_ADMIN
}

model Shop {
  id              String   @id @default(cuid())
  name            String
  description     String?
  ownerId         String   @unique  // Ensure the ownerId is unique for one-to-one relation
  owner           User     @relation("UserShop", fields: [ownerId], references: [id])
  products        Product[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Product {
  id              String    @id @default(cuid())
  name            String
  price           Float
  weight          Float
  availability    Availability
  delivery        Delivery
  minOrder        String    // can be kg, gram, lbs, etc.
  description     String
  reputation      Int
  images          Image[]   // list of image URLs
  shopId          String
  shop            Shop      @relation(fields: [shopId], references: [id])
  categoryId      String
  category        Category  @relation(fields: [categoryId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  carts           Cart[]   // Reverse relation field to Cart
}

model Image {
  id        String   @id @default(cuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

enum Availability {
  IN_STOCK
  LIMITED_STOCK
}

enum Delivery {
  TODAY
  TOMORROW
  SPECIFIC_DATE
}

model Supplier {
  id              String            @id @default(cuid())
  name            String
  description     String            @db.Text
  location        String
  image           String?
  rating          Float             @default(0)
  reviewCount     Int               @default(0)
  products        String            @db.Text // JSON array of product names
  certifications  String            @db.Text // JSON array of certifications
  established     Int
  farmSize        String
  specialties     String            @db.Text // JSON array of specialties
  contactPhone    String
  contactEmail    String
  contactWebsite  String?
  totalProducts   Int               @default(0)
  monthlyOrders   Int               @default(0)
  satisfactionRate Float            @default(0)
  ownerId         String?           @unique
  owner           User?             @relation("SupplierOwner", fields: [ownerId], references: [id])
  supplierProducts SupplierProduct[]
  orders          Order[]           @relation("SupplierOrders")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model SupplierProduct {
  id              String      @id @default(cuid())
  name            String
  price           Float
  unit            String      // kg, gram, liter, etc.
  availability    Availability
  delivery        Delivery
  minOrder        String
  description     String      @db.Text
  images          String      @db.Text // JSON array of image URLs
  supplierId      String
  supplier        Supplier    @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  categoryId      String
  category        Category    @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  cartItems       CartItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model CartItem {
  id                String          @id @default(cuid())
  userId            String
  supplierProductId String
  quantity          Int             @default(1)
  user              User            @relation("UserCartItems", fields: [userId], references: [id])
  supplierProduct   SupplierProduct @relation(fields: [supplierProductId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  supplierId      String?
  user            User        @relation("UserOrders", fields: [userId], references: [id])
  supplier        Supplier?   @relation("SupplierOrders", fields: [supplierId], references: [id])
  totalAmount     Float
  status          OrderStatus
  items           OrderItem[]
  shippingAddress String      @db.Text
  notes           String?     @db.Text
  orderedAt       DateTime    @default(now())
  shippedAt       DateTime?
  deliveredAt     DateTime?
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id                String          @id @default(cuid())
  orderId           String
  supplierProductId String
  quantity          Int
  price             Float
  order             Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  supplierProduct   SupplierProduct @relation(fields: [supplierProductId], references: [id])
  createdAt         DateTime        @default(now())
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique // thêm slug để làm khóa duy nhất
  products  Product[]
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}
